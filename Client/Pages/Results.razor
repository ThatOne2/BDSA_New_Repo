@page "/project/{action}/{secondParam}"
@page "/project/{action}/"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using TrialProject.Shared
@using TrialProject.Shared.DTO;
@inject NavigationManager NavManager
@* @attribute [Authorize] *@
@inject HttpClient Http

<PageTitle>Results for the tag: @SecondParam </PageTitle>

<SearchBar />

@if (!String.IsNullOrWhiteSpace(SecondParam))
{
    <h1>Results for: @SecondParam</h1>
}

<div class = "center">
    <div class = "resultPane">
        @if (projectsList == null)
        {
            <h1>No results found</h1>
        }
        else
        {
            @foreach (var proj in projectsList)
            {
                <div class = "projectContainer white">
                    <div class = "projectContainerLeft">
                        <div class = "pictureWannabe"></div>
                        <div class = "text">
                            <p>@proj.SupervisorName</p>
                        </div>
                    </div>
                    <div class = "projectContainerRight">
                        <div class = "centerText">
                            <h2>@proj.name</h2>
                        </div>
                        <p>@proj.shortDescription</p>
                        <div class = "tagBox">
                            @foreach (var tag in proj.Tags!)
                            {
                                <button class = "tagBtn" @onclick="@(() => GoToTag(@tag))"> @tag </button>
                            }
                        </div>
                        <button class = "viewProjBtn" @onclick="@(() => ViewProj(proj))"> View </button>
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    [Parameter]
    public string? Action { get; set; }
    [Parameter]
    public string? SecondParam { get; set; }
    private ProjectPreviewDTO[]? projectsList;
    
    private void ViewProj(ProjectPreviewDTO project)
    {
        var uri = $"{NavManager.BaseUri}project/{project.ID}";

        NavManager.NavigateTo(uri);
    }

    private void GoToTag(string tag)
    {
        var uri = $"{NavManager.BaseUri}project/tag/{tag}";
        NavManager.NavigateTo(uri, true);
    }

    private void NavToDetails(int id)
	{
		NavManager.NavigateTo("/project/" + id);
	}

    protected override async Task OnInitializedAsync()
    {
        if (IsValidAction(Action)) {
            try
            {
                switch(Action)
                {
                    case "search":
                        projectsList = await Http.GetFromJsonAsync<ProjectPreviewDTO[]>("project/api/search/"+ SecondParam);
                        break;
                    case "tag":
                        projectsList = await Http.GetFromJsonAsync<ProjectPreviewDTO[]>("Project/api/tag/"+ SecondParam);
                        break;
                    default:
                        projectsList = await Http.GetFromJsonAsync<ProjectPreviewDTO[]>("Project/api");
                        break;
                }
            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }
            
        }
    }

    private bool IsValidAction(string a)
    {
        if (a == "tag" || a == "search") {return true;}
        return false;
    }
}
