@page "/project/{id:int}"
@using TrialProject.Shared
@using TrialProject.Shared.DTO
@inject NavigationManager NavManager
@inject CurrentUser currentuser
@inject HttpClient Http

<PageTitle>View Project</PageTitle>

@if (project == null)
{
	<p>@fStatus"</p>
} else
{

	<div class="top">
			<h1>@project.name</h1>
		</div>

	<body>
		

		<div class="content_left">
			

		<p>By @project.SupervisorName</p>

		<h4>Short</h4>
		<p>@project.shortDescription</p>

		<h4>Description</h4>
		<textarea name="longdescription" id="longdescription" cols="30" rows="10" readonly>
			@project.longDescription
		</textarea>
		<p></p>

		<h4>Deadline</h4>
		<p></p>

		<h4>Contact information</h4>
		<p></p>

		<AuthorizeView Context="LoggedIn">
		<Authorized>
			<AuthorizeView Roles="supervisor">
				<Authorized>
					<input type="submit" class="OurButton" value="Edit" @onclick="NavToEdit">
					<input type="button" class="OurButton" value="@archiveText" @onclick="ArchiveProj">
					<input type="button" class="OurButton" value="Delete" @onclick="DeleteProj">
				</Authorized>
			</AuthorizeView>
			<AuthorizeView Roles="student">
				<Authorized>
					@if (ongoing) {
						<button class="OurButton">Apply</button>
					} else
					{
						<p>This project has been archived!</p>
					}
				</Authorized>
			</AuthorizeView>
		</Authorized>
		<NotAuthorized>
			<p>Log in to apply for project!</p>
		</NotAuthorized>
	</AuthorizeView>
	
	</div>

	<div class="content_center"></div>

	<div class="content_right"></div>

	</body>
	


	
}





@code {
	[Parameter]
	public int id { get; set; }

	private ProjectDescDTO? project;

	private string fStatus = "Searching...";

	private bool ongoing = true;

	private string archiveText = "Archive";

	protected override async Task OnInitializedAsync()
	{
		try
		{
			project = await Http.GetFromJsonAsync<ProjectDescDTO?>("Project/api/" + id);
			if (project.ProjectStatus != Status.Ongoing)
			{
				ongoing = false;
				archiveText = "Unarchive";
			}

		}
		catch
		{
			// Exception handling

		}
		if (project == null) fStatus = "Project not found!";
	}

	private void NavToEdit()
	{
		NavManager.NavigateTo("/project/edit/" + id);
	}

	private async void ArchiveProj()
	{
		if (ongoing)
		{
			var response = await Http.PutAsJsonAsync<Status>("Project/api/" + id + "/status", Status.Archived);
			if (response.IsSuccessStatusCode)
			{
				archiveText = "Unarchive";
				ongoing = false;
			}
		} else
		{
			var response = await Http.PutAsJsonAsync<Status>("Project/api/" + id + "/status", Status.Ongoing);
			if (response.IsSuccessStatusCode)
			{
				archiveText = "Archive";
				ongoing = true;
			}
		}
		base.StateHasChanged();
	}

	private async void UnarchiveProj()
	{
		var response = await Http.PutAsJsonAsync<Status>("Project/api/" + id + "/status", Status.Ongoing);
		if (response.IsSuccessStatusCode) ongoing = true;
	}

	private async void DeleteProj()
	{
		try
		{
			var response = await Http.DeleteAsync("Project/api/" + id);
			if (response.IsSuccessStatusCode) NavManager.NavigateTo("/allprojects");
		} catch (Exception e)
		{
			Console.WriteLine(e.Message);
		}
	}
	
}