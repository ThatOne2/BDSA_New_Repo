@page "/projects/{id:int}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using TrialProject.Shared
@using TrialProject.Shared.DTO
@inject NavigationManager NavManager
@inject CurrentUser currentuser

<PageTitle>View Project</PageTitle>

@if (project == null)
{
	<p>No project found!</p>
} else
{
	<div>
		<h1>@project.name</h1>

		<p>By @project.SupervisorID</p>

		<p>@project.shortDescription</p>

		<p>@project.longDescription</p>
	</div>


	<AuthorizeView>
		<Authorized>
			@if (currentuser.isSupervisor)// && user.getId() == project.supervisorId) <-- How do we want to do this?
			{
				<input type="submit" value="Edit" @onclick="NavToEdit">
				<input type="submit" value="Archive" @onclick="ArchiveProj">
			} else
			{
				<button>Apply</button>
			}

		</Authorized>
		<NotAuthorized>
			<p>Log in to apply for project!</p>
		</NotAuthorized>
	</AuthorizeView>
}





@code {
	[Parameter]
	public int id { get; set; }

	private ProjectDescDTO project = new ProjectDescDTO{ID = 5, name = "Uwu", SupervisorID = "Carl", shortDescription = "This is the short description", longDescription = "This is the loooooooooooooooooooooooooooooooooooooooooo ooooooooooooooooooooooooo ooooooooooooooooooooooooooo oooooooooooooooo ooooooooooo ooooooooooooooooooooooo oooooooooooooooooooooooooooooooong description"};

	//private User user = new User();

	protected override async Task OnInitializedAsync()
	{
		try
		{
			// Get project by ID
			//var rep = new TaskRepository();
			//project = rep.ReadProjectById(id);

		}
		catch
		{
			// Exception handling

		}
		await Task.FromResult(0);
	}

	private void NavToEdit()
	{
		NavManager.NavigateTo("/projects/edit/" + id);
	}

	private void ArchiveProj()
	{
		//project = rep.UpdateStatus(id, Status.Archived);
	}

}