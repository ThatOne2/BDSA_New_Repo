@page "/project/{id:int}"
@using TrialProject.Shared
@using TrialProject.Shared.DTO
@inject NavigationManager NavManager
@inject HttpClient Http

<PageTitle>View Project</PageTitle>

@if (project == null)
{
	<p>@fStatus"</p>
} else
{

	<div class="top">
		<h1>@project.name</h1>
	</div>

	<body>
		

		<div class="content_left">

			<h4>Short</h4>
			<p>@project.shortDescription</p>

			<h4>Description</h4>
			<textarea name="longdescription" id="longdescription" cols="30" rows="10" readonly>
				@project.longDescription
			</textarea>

			<AuthorizeView Roles="supervisor">
				<Authorized>
					<input type="submit" class="OurButton" value="Edit" @onclick="NavToEdit">
					<input type="button" class="OurButton" value="Delete" @onclick="DeleteProj">
				</Authorized>
			</AuthorizeView>
	
		</div>

		<div class="content_center"></div>

		<div class="content_right">
			<div class="abouttitle"><h5>About</h5></div>

			<div class="aboutcontainer">
				<h6>Author: </h6>
				@project.SupervisorName 
				<h6>Contact: </h6>
				<AuthorizeView>
					<Authorized>
						@project.SupervisorEmail
					</Authorized>
					<NotAuthorized>
						Log in to view contact information!
					</NotAuthorized>
				</AuthorizeView>
			</div>

		</div>


	</body>
	
}





@code {
	[Parameter]
	public int id { get; set; }

	private ProjectDescDTO? project;

	private string fStatus = "Searching...";

	protected override async Task OnInitializedAsync()
	{
		try
		{
			project = await Http.GetFromJsonAsync<ProjectDescDTO?>("Project/api/" + id);
		}
		catch
		{
			// Exception handling

		}
		if (project == null) fStatus = "Project not found!";
	}

	private void NavToEdit()
	{
		NavManager.NavigateTo("/project/edit/" + id);
	}

	private async void DeleteProj()
	{
		try
		{
			var response = await Http.DeleteAsync("Project/api/" + id);
			if (response.IsSuccessStatusCode) NavManager.NavigateTo("/allprojects");
		} catch (Exception e)
		{
			Console.WriteLine(e.Message);
		}
	}
	
}