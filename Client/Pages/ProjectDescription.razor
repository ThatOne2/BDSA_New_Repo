@page "/project/{id:int}"
@using TrialProject.Shared
@using TrialProject.Shared.DTO
@inject NavigationManager NavManager
@inject CurrentUser currentuser
@inject HttpClient Http

<PageTitle>View Project</PageTitle>

@if (project == null)
{
	<p>@fStatus"</p>
} else
{

	<div class="top">
			<h1>@project.name</h1>
		</div>

	<body>
		

		<div class="content_left">
			

		<p>By @project.SupervisorName</p>

		<h4>Short</h4>
		<p>@project.shortDescription</p>

		<h4>Description</h4>
		<textarea name="longdescription" id="longdescription" cols="30" rows="10">
			@project.longDescription
		</textarea>
		<p></p>

		<h4>Deadline</h4>
		<p></p>

		<h4>Contact information</h4>
		<p></p>

		<AuthorizeView Context="LoggedIn">
		<Authorized>
			<AuthorizeView Roles="supervisor">
				<Authorized>
					<input type="submit" class="OurButton" value="Edit" @onclick="NavToEdit">
					<input type="submit" class="OurButton" value="Archive" @onclick="ArchiveProj">	
				</Authorized>
			</AuthorizeView>
			<AuthorizeView Roles="student">
				<Authorized>
					<button class="OurButton">Apply</button>
				</Authorized>
			</AuthorizeView>
		</Authorized>
		<NotAuthorized>
			<p>Log in to apply for project!</p>
		</NotAuthorized>
	</AuthorizeView>
	
	</div>

	<div class="content_center"></div>

	<div class="content_right"></div>

	</body>
	


	
}





@code {
	[Parameter]
	public int id { get; set; }

	private ProjectDescDTO? project;

	private string fStatus = "Searching...";

	protected override async Task OnInitializedAsync()
	{
		try
		{
			project = await Http.GetFromJsonAsync<ProjectDescDTO?>("Project/" + id);

		}
		catch
		{
			// Exception handling

		}
		if (project == null) fStatus = "Project not found!";
	}

	private void NavToEdit()
	{
		NavManager.NavigateTo("/project/edit/" + id);
	}

	private void ArchiveProj()
	{
		//project = rep.UpdateStatus(id, Status.Archived);
	}

	
}