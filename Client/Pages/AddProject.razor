@page "/projects/new"
@using TrialProject.Shared
@using TrialProject.Shared.DTO
@using System.Net;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject NavigationManager NavManager



<PageTitle>Add Project</PageTitle>

<h1>New Project </h1>
<AuthorizeView Roles="supervisor">
    <Authorized>
        <div class="PostProject">
            <div>
                <label for="pname">Project Name</label>
                <input type="text" id="pname" name="projname" placeholder="Project name.." @bind="@inputName" @oninput="OnInputNameEvent">
            </div>

            <div>
                <label for="pdes">Short Project Description</label>
                <input type="text" id="pdes" name="projdes" placeholder="Short description to catch interest.."@bind="@inputDes" @oninput="OnInputDesEvent">
            </div>

            <div class="wFull">
                <label for="pldes">Project Description</label>
                <!--input type="text" id="pldes" name="projlongdes" placeholder="Project description.."@bind="@inputLongDes" @oninput="OnInputLongDesEvent"-->
                <textarea id="pldes" name="projlongdes" class="pDescIn" placeholder="Project description.."@bind="@inputLongDes" /><!--@oninput="OnInputLongDesEvent"/-->
            </div>

            <div>
                <label for="ptag">Tags</label>
                <div>
                    @foreach (var tag in tagList!)
                    {
                        <input type="checkbox" @onchange="eventArgs => { OnInputTagEvent(tag, eventArgs); }" />@tag.ToString()<br />
                    }
                </div>
            </div>

            
            <button class="OurButton" @onclick="addProject">Post Project</button>
            <button class="OurButton" @onclick="NavToList">Cancel</button>
        </div>
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized to post projects</p>
    </NotAuthorized>
</AuthorizeView>


@code {
    private string? inputName = null;
    private string? inputDes = null;
    private string? inputLongDes = null;
    private string? inputTag = null;

    private List<TagsEnums> checkedTags = new List<TagsEnums>();

    private List<TagsEnums>? tagList;

    protected override async Task OnInitializedAsync()
    {
        /*
        tagList = Enum.GetValues(typeof(TagsEnums))
        .Cast<TagsEnums>()
        .Select(v => v.ToString())
        .ToList();
        */

        tagList = Enum.GetValues(typeof(TagsEnums))
        .Cast<TagsEnums>()
        .ToList();
    }


    private void OnInputNameEvent(ChangeEventArgs changeEvent)
    {
        inputName = (string)changeEvent.Value!;
    }

    private void OnInputDesEvent(ChangeEventArgs changeEvent)
    {
        inputDes = (string)changeEvent.Value!;
    }

    private void OnInputLongDesEvent(ChangeEventArgs changeEvent)
    {
        inputLongDes = (string)changeEvent.Value!;
    }

    private void OnInputTagEvent(TagsEnums tag, ChangeEventArgs changeEvent)
    {
        var tagChecked = (bool)changeEvent.Value!;
        if (tagChecked)
        {
            if (!checkedTags.Contains(tag)) checkedTags.Add(tag);
        } else
        {
            if (checkedTags.Contains(tag)) checkedTags.Remove(tag);
        }
    }

    private async void addProject() {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var p1 = new CreateProjectDTO { 
            name = inputName, 
            Supervisor = user.Identity!.Name, 
            shortDescription = inputDes, 
            longDescription = inputLongDes, 
            Tags = checkedTags
        };

        // Send to database
        try {
            var ans = await Http.PostAsJsonAsync<CreateProjectDTO>("Project", p1);
            
            if (ans.IsSuccessStatusCode) {
                NavToList();
            }
        } catch {

        }
        
    }

    private async void NavToList()
    {
      NavManager.NavigateTo("/allprojects");
    }
}
