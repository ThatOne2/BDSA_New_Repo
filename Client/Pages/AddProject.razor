@page "/projects/new"
@using TrialProject.Shared
@using TrialProject.Shared.DTO
@using System.Security.Claims
@using System.Net;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject NavigationManager NavManager



<PageTitle>Add Project</PageTitle>

<h1>New Project </h1>
<AuthorizeView Roles="supervisor">
    <Authorized>
        <EditForm class="PostProject" Model="@projDTO" OnValidSubmit="addProject" Context="ProjForm">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div>
                <label for="pname">Project Name</label>
                <input type="text" id="pname" name="projname" placeholder="Project name.." @bind-value="@projDTO.name">
            </div>

            <div>
                <label for="pdes">Short Project Description</label>
                <input type="text" id="pdes" name="projdes" placeholder="Short description to catch interest.." @bind-value="@projDTO.shortDescription">
            </div>

            <div class="wFull">
                <label for="pldes">Project Description</label>
                <textarea id="pldes" name="projlongdes" class="pDescIn" placeholder="Project description.." @bind="@projDTO.longDescription" @bind:event="oninput"/>
            </div>

            <div>
                <label for="ptag">Tags</label>
                <div>
                    @if (tagList != null)
                    {
                        @foreach (var tag in tagList!)
                        {
                            <input type="checkbox" @onchange="eventArgs => { OnInputTagEvent(tag, eventArgs); }" />@tag.ToString()<br />
                        }
                    } else
                    {
                        <p>Failed to load tags</p>
                    }
                    
                </div>
            </div>

            
            <button type="submit" class="OurButton">Post Project</button>
            <button class="OurButton" @onclick="NavToList">Cancel</button>
            @message
        </EditForm>
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized to post projects</p>
    </NotAuthorized>
</AuthorizeView>


@code {
    private System.Security.Claims.ClaimsPrincipal? user;

    private CreateProjectDTO projDTO = new CreateProjectDTO();

    private List<TagsEnums>? tagList;

    private string message = "";

    protected override async Task OnInitializedAsync()
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        projDTO.Supervisor = user.Identity!.Name;
        projDTO.SupervisorEmail = user.Claims.Where(x => x.Type == "email").Select(y => y.Value).First();

        tagList = Enum.GetValues(typeof(TagsEnums))
        .Cast<TagsEnums>()
        .ToList();
    }

    private void OnInputTagEvent(TagsEnums tag, ChangeEventArgs changeEvent)
    {
        var tagChecked = (bool)changeEvent.Value!;

        if (tagChecked)
        {
            if (projDTO.Tags == null) projDTO.Tags = new List<TagsEnums>();
            if (!projDTO.Tags.Contains(tag)) projDTO.Tags.Add(tag);

        } else if (projDTO.Tags != null)
        {
            if (!projDTO.Tags.Contains(tag)) projDTO.Tags.Remove(tag);
            if (projDTO.Tags.Count == 0) projDTO.Tags = null;
        }
    }

    private async void addProject() {
        try {
            var ans = await Http.PostAsJsonAsync<CreateProjectDTO>("Project", projDTO);
            //Console.WriteLine("Checking status");
            //NavToList();

            
            if (ans.IsSuccessStatusCode) { 
                NavToList();
            }
            else
            {
                message = "An error has occurred, please try again.";
            }
            
        } catch(Exception e) 
        {
            message = "An error has occurred, please try again.";
            Console.WriteLine(e.Message);
        }
    }

    private void NavToList()
    {
      NavManager.NavigateTo("/allprojects");
    }
}
