@page "/"
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using TrialProject.Shared
@using TrialProject.Shared.DTO;
@using System.Collections.Generic
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http

<PageTitle>TheStart</PageTitle>

<SearchBar />

<div class = "center vertical">
    <div class = "container">
        <h3>Tags:</h3>
        <hr class="rounded">
        @if (tagList == null)
        {
            <p><em>Loading...</em></p>
        } else 
        {
        <div class = "tagcontainer">
            @foreach (var tag in tagList) {
                <button class = "tagBtn" @onclick="@(() => goToTag(@tag))"> @tag </button> 
            }
        </div> 
        }

    </div>
</div>

<AuthorizeView >
  @*   <Authorized>  
        @foreach (var e in claims!)
        {
             <p>@e.Type = @e.Value</p>
        } 
    </Authorized> *@
    <NotAuthorized>
        <p>You are not authorized to post projects</p>
    </NotAuthorized>
</AuthorizeView>

  
 

@code {
    private List<string>? tagList;
    
    private System.Security.Claims.ClaimsPrincipal? user;
    IEnumerable<System.Security.Claims.Claim> claims;

    bool UserIsRegistered = false;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        tagList = Enum.GetValues(typeof(TagsEnums))
        .Cast<TagsEnums>()
        .Select(v => v.ToString())
        .ToList();

        

         if (user.Identity.IsAuthenticated && UserIsRegistered != true) {
            await CreateUser();
        } 
       
    }

    private void goToTag(string tag)
    {
        var uri = $"{NavigationManager.BaseUri}project/tag/{tag}";
        NavigationManager.NavigateTo(uri);
    }

    private async Task CreateUser() {
       
            claims = user.Claims;
            var usertype = claims.Where(x => x.Type == "appRole").Select(y => y.Value).FirstOrDefault();
            
            if(usertype.Equals("supervisor")) {
                try {
                    var name = user.Identity!.Name;
                    var email = user.Claims.Where(x => x.Type == "email").Select(y => y.Value).First();
                    var superDTO = new CreateSupervisorDTO{name = name, Email = email};
                    var ans = await Http.PostAsJsonAsync<CreateSupervisorDTO>("Supervisors/api", superDTO);
                        UserIsRegistered = true;
                } catch(Exception e) {
                    Console.WriteLine(e.Message);
                }
        } else {
                try {
                    var name = user.Identity!.Name;
                    var email = user.Claims.Where(x => x.Type == "email").Select(y => y.Value).First();
                    var studDTO = new CreateStudentDTO{name = name, Email = email};
                    var ans = await Http.PostAsJsonAsync<CreateStudentDTO>("Students/api", studDTO);
                    UserIsRegistered = true;
                } catch(Exception e) {
                    Console.WriteLine(e.Message);
            }
        }
    } 
}
